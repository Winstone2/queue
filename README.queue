# queue
To implement a Queue data structure in JavaScript, we can use an array as the underlying data storage and implement the enqueue, dequeue, and peek methods accordingly. A queue follows the First-In-First-Out (FIFO) principle, meaning that the first element added to the queue is the first one to be removed.
Thought Process:

    We define a Queue class with a constructor that initializes an empty array this.queue to hold the elements of the queue.

    The enqueue method allows us to add elements to the end of the queue using the push method of the array.

    The dequeue method removes and returns the first element from the queue using the shift method of the array. If the queue is empty, it returns undefined.

    The peek method returns the first element of the queue (next to be dequeued) without removing it. If the queue is empty, it returns undefined.

    The isEmpty method checks if the queue is empty by checking the length of the array.

    The size method returns the number of elements currently in the queue.

Edge Cases to Consider:

    Dequeue or Peek on an Empty Queue: If the dequeue or peek method is called on an empty queue, they should return undefined to indicate that there are no elements to dequeue or peek.
In this example, we create a Queue instance called myQueue and add three elements to it using the enqueue method. We then use the peek method to see the first element in the queue, the dequeue method to remove the first element, and the size method to get the current size of the queue.
